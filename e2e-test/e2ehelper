#!/usr/bin/env bash

export NODE_ENV="E2E"
project_dir="${BASH_SOURCE%/*}/.."

action="$1"
server_bin="npm start -s"
server_startup_retries=10

wdm_bin="$project_dir/node_modules/webdriver-manager/bin/webdriver-manager"
wdm_bin_hr="$(basename ${wdm_bin})"
selenium_dir="$project_dir/node_modules/webdriver-manager/selenium"
server_config="$project_dir/backend/configLoader.js"

e2e_output="$project_dir/e2e.output"

sed_number_group="\([0-9]*\)"
server_pid_msg="nodeServer.pid: "
server_pid_re="^${server_pid_msg}${sed_number_group}$"
wdm_pid_re="^.*Detached pid: ${sed_number_group}$"
selenium_pid_re="^.*seleniumProcess.pid: ${sed_number_group}$"
server_port_re=".*e2eEnv.*port:${sed_number_group},.*"

function main () {
  [[ ! -f "$wdm_bin" ]] && error_message "$wdm_bin not found. \nPlease run 'npm install' first."
  [[ ! -d "$selenium_dir" ]] && \
      echo "== Selenium directory not found, running '${wdm_bin_hr} update' ..." && \
      ${wdm_bin} update
  [[ ! -f "$server_config" ]] && error_message "$server_config not found, check location."

  case "$action" in
    "start" )
      start_e2e_infrastructure
    ;;
    "stop" )
      stop_e2e_infrastructure
    ;;
    * )
      error_message "not recognized: $action \nmust be either '$(basename $0) start' or '$(basename $0) stop'"
    ;;
  esac
}

function start_e2e_infrastructure () {
  [[ -f "$e2e_output" ]] && \
      echo "$(basename "$e2e_output") exists, shutting down existing e2e infrastructure..." && \
      stop_e2e_infrastructure
  echo "new session" > "$e2e_output"
  start_server
  wait_for_server
  start_webdriver
}

function stop_e2e_infrastructure () {
  [[ ! -f "$e2e_output" ]] && error_message "$e2e_output not found!"
  kill "$(extract_pid "$server_pid_re")" && echo "server stopped."
  kill "$(extract_pid "$selenium_pid_re")" && echo "selenium stopped."
  kill "$(extract_pid "$wdm_pid_re")" && echo "$wdm_bin_hr stopped."
  rm "$e2e_output"
  echo "e2e infrastructure stopped."
}

function start_server () {
  pushd . > /dev/null
  ${server_bin} >> "$e2e_output" 2>&1 &
  popd > /dev/null
  server_pid="$!"
  echo "${server_pid_msg}${server_pid}" >> "$e2e_output"
}

function wait_for_server () {
  server_port=`extract_server_port`
  printf "waiting for server start (port ${server_port}): "
  sleep 2
  while [[ ${server_startup_retries} > 0 && ! `lsof -i :${server_port}` ]]; do
    sleep 1
    printf "$server_startup_retries "
    server_startup_retries=`expr ${server_startup_retries} - 1`
  done

  if [[ ${server_startup_retries} > 0 ]]; then
    echo "server started"
  else
    error_message "server NOT running!"
  fi
}

function start_webdriver () {
  ${wdm_bin} start --detach >> "$e2e_output" 2>&1
  echo "$wdm_bin_hr started"
}

function extract_pid () {
  pid=`sed -n -e 's/'"$1"'/\1/p' "$e2e_output"`
  check_is_number "$pid" "no match of '$1' in '$e2e_output' \nresult: '$pid'"
  echo "$pid"
}

function extract_server_port () {
  port=`cat "$server_config" | tr -d '\n ' | sed -n -e 's/'"$server_port_re"'/\1/p'`
  check_is_number "$port" "E2E Server port not found in ${server_config} \nresult: '$port'"
  echo "$port"
}

function check_is_number () {
  ! [[ "$1" =~ ^[0-9]+$ ]] && error_message "$2"
}

function error_message () {
  printf "$*\n"
  exit 1
}

main; exit